#!/usr/bin/env node
global.cli   = require('commander');
var moment   = require('moment');
var Q        = require('q');
var util     = require('util');
var Helpers  = require('../lib/helpers');
var Timer    = require('../lib/timer');
var Log      = require('../lib/log');
var Landing  = require('../lib/landing');

var speak    = Helpers.speak;
var growl    = Helpers.growl;
var clear    = Helpers.clear;
var duration = Helpers.duration;
var format   = util.format;

var work, snack;

Q.longStackSupport = true;

cli
  .usage('[reason]')
  .version(require('../package').version)
  .option('-w, --work [n]', 'number of minutes to run [25]', 25)
  .option('-b, --break [n]', 'number of minutes for a break (0 to disable) [5]', 5)
  .option('-q, --quiet', 'no sounds')
  .on('--help', function() {
    console.log('  examples:');
    console.log('');
    console.log('    $ pomojs              # start a timer');
    console.log('    $ pomojs Fix stuff    # reason');
    console.log('    $ pomojs -w 10        # 10-minute pomodoro');
  })
  .parse(process.argv);

var reason = cli.args.join(' ') || 'work';
var total  = { start: new Date(), end: null };

var say = function(words) {
  if (!cli.quiet) speak(words);
  growl(words);
};

Q.try(function() {
  work  = new Timer(cli.work,  { say: say, progress: Landing });
  snack = new Timer(cli.break, { color: 32, say: say, progress: Landing });

}).then(function() {
  clear();

  say(format("%s, %s to do %s", 
     moment().format("h:mm a"), work.duration.humanize(), reason));

  if (cli.break > 0) {
    Log.now(format("time for %s (%s)\na %s break follows",
      reason, duration(work.duration), duration(snack.duration)));
  } else {
    Log.now(format("time for %s (%s)",
      reason, duration(work.duration)));
  }

  work.initial();
  return Q.delay(1000);

}).then(function() {
  return work.start();

}).then(function() {
  if (cli.break <= 0) return;

  say(format("Done! %s, break for %s",
    moment().format("hh:mm a"), snack.duration.humanize()));

  Log.now(format("time for a break (%s)",
    duration(snack.duration)));

  snack.initial();

  return Q.delay(3000)
  .then(function() {
    total.end = new Date();
    return snack.start();
  });

}).then(function() {
  say("All done!");
  Log.now("done");

}).done();

// -----

process.on('SIGINT', function() {
  console.log("");
  Log.now('interrupted');
  process.exit(0);
});
