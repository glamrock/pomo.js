#!/usr/bin/env node
// vim:ft=javascript

global.cli   = require('commander');
var moment   = require('moment');
var Q        = require('q');
var util     = require('util');
var Helpers  = require('../lib/helpers');
var Timer    = require('../lib/timer');
var Print    = require('../lib/print');
var Landing  = require('../lib/landing');
var Tmux     = require('../lib/tmux');
var Logger   = require('../lib/logger');
var Runner   = require('../lib/runner');

var speak    = Helpers.speak;
var growl    = Helpers.growl;
var clear    = Helpers.clear;
var duration = Helpers.duration;
var format   = util.format;

var work, snack;

Q.longStackSupport = true;

cli
  .usage('[reason]')
  .version(require('../package').version)
  .option('-w, --work [mins]', 'work timer length [25]', 25)
  .option('-b, --break [mins]', 'break timer length, 0 to disable [5]', 5)
  .option('-d, --duration [mins]', 'shortcut for -w <secs> -b 0', null)
  .option('-t, --tmux', 'enable tmux reporting')
  .option('-l, --log [file]', 'log to this file')
  .option('-q, --quiet', 'no sounds')
  .on('--help', function() {
    console.log('  examples:');
    console.log('');
    console.log('    $ pomojs                # start a timer');
    console.log('    $ pomojs "Fix stuff"    # reason');
    console.log('    $ pomojs -w 10          # 10-minute pomodoro');
    console.log('    $ pomojs -d 5 "Tea"     # Simple tea timer (no break)');
  })
  .parse(process.argv);

var reason = cli.args.join(' ') || 'work';
if (cli.duration) { cli.work = cli.duration; cli.break = 0; }

var say = function(words) {
  if (!cli.quiet) speak(words);
  growl(words);
};

var pomo = new Runner(cli.work, cli.break, { reason: reason });

if (cli.tmux) Tmux(pomo);
if (cli.log) Logger(pomo, cli.log);

// ----------------------------------------------------------------------------
// Printing

pomo.on({
  'start': function() {
    clear();

    var str = format("time for %s (%s)",
      reason, duration(pomo.work.duration));

    if (pomo.snack)
      str += format("\na %s break follows",
        duration(pomo.snack.duration));

    Print.now(str);
  },

  // Work-to-snack transition
  'snack': function() {
    Print.now(format("time for a break (%s)",
      duration(pomo.snack.duration)));
  },

  'timer': function(mode, perc, elapsed, remaining, words) {
    Landing.apply(this, arguments);
    if (words) say(words);
  },

  // All done
  'finish': function() {
    Print.now("done");
  },

  'interrupt': function() {
    console.log("");
    Print.now("interrupted");
  }
});

// ----------------------------------------------------------------------------
// Speaking / growling

pomo.on({
  'start': function() {
    say(format("%s, %s for %s", 
       moment(pomo.now()).format("h:mm a"),
       pomo.work.duration.humanize(),
       pomo.reason));
  },
  'snack': function() {
    say(format("Done! %s, break for %s",
      moment().format("hh:mm a"), pomo.snack.duration.humanize()));
  },
  'finish': function() {
    say(pomo.reason + ": all done!");
  },
  'timer': function(_, _, _, _, words) {
    if (words) say(words);
  }
});


pomo.run();
